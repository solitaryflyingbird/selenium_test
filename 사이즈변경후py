from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains

import pyautogui
import time, os, random, requests
mobile_emulation = { "deviceName": "iPhone X" }
chrome_options = webdriver.ChromeOptions()
chrome_options.add_experimental_option("mobileEmulation", mobile_emulation)

def move_to_element_smoothly(element):
    current_x, current_y = pyautogui.position()
    target_x, target_y = element.location['x'], element.location['y']

    distance = ((target_x - current_x)**2 + (target_y - current_y)**2)**0.5
    duration = distance * random.uniform(0.001, 0.005)

    # Move the mouse in a smooth, curved path
    pyautogui.moveTo(target_x, target_y, duration=duration, tween=pyautogui.easeInOutQuad)

    # Add a random delay after the mouse movement
    time.sleep(random.uniform(0.5, 1.5))
def move_mouse_to_absolute_position(actions, x, y):
    actions.move_by_offset(-9999, -9999)
    actions.move_by_offset(x, y)
    actions.perform()
def attack_start():
    try:
        time.sleep(1)
        nickname_input = driver.find_element("name", "name")
        password_input = driver.find_element("name", "password")
        subject_input = driver.find_element("name", "subject")
        nickname_input.clear()
        password_input.clear()
        nickname_input.send_keys('ㅇㅇ')
        password_input.send_keys('1111')
        subject_input.send_keys("실험중입니다.")
        
        iframe = driver.find_element("name", "tx_canvas_wysiwyg")
        driver.switch_to.frame(iframe)
        main_input = driver.find_element(By.CLASS_NAME, "tx-content-container")
        main_input.send_keys("x")
        driver.switch_to.default_content()
        actions.perform()
        actions.move_by_offset(2, 3)
        actions.perform()
        actions.move_by_offset(1, 3)
        actions.perform()
        actions.move_by_offset(3, 1)
        actions.perform()
        actions.move_by_offset(1, 1)
        actions.perform()

        button = driver.find_element(By.CSS_SELECTOR, '.btn_blue.btn_svc.write')

        move_to_element_smoothly(button)

        button.click()
        print(111)
        time.sleep(1)
        #nickname_input.send_keys('ㅇㅇ')
        #password_input.send_keys('1111')
        time.sleep(1)
        x = driver.window_handles
        print(x)
        print("click")
    finally:
        print("quit")
        # Close the browser (you can use time.sleep() before this line if you want to keep the browser open for some time)
        driver.quit()

options = Options()

options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument("--disable-blink-features=AutomationControlled")
# Exclude the collection of enable-automation switches 
options.add_experimental_option("excludeSwitches", ["enable-automation"]) 
# Turn-off userAutomationExtension 
options.add_experimental_option("useAutomationExtension", False) 
options.add_experimental_option("mobileEmulation", mobile_emulation)
# Setting the driver path and requesting a page 
W=1920
H=1200
options.add_argument(f"--window-size={W},{H}")
 


capabilities = DesiredCapabilities.CHROME.copy()
capabilities['goog:chromeOptions'] = options.to_capabilities()
driver = webdriver.Chrome(executable_path='path/to/chromedriver', desired_capabilities=capabilities, options = options)
# Changing the property of the navigator value for webdriver to undefined 
driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})") 

driver.implicitly_wait(1) 
actions = ActionChains(driver)

URL = "https://gall.dcinside.com/mgallery/board/write/?id=covidvaccine"
driver.get(URL)


actions = ActionChains(driver)
actions.move_by_offset(1230, 431)
actions.perform()
actions.move_by_offset(2, 3)
actions.perform()
actions.move_by_offset(1, 3)
actions.perform()
actions.move_by_offset(3, 1)
actions.perform()
actions.move_by_offset(1, 1)
actions.perform()
attack_start()
time.sleep(1111)



